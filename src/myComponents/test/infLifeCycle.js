import React, { Component } from 'react'

//методы жизненного цикла компонента исп безстрелочной ф-и для привязки контекста!!!


class LC extends Component {
  
  componentDidMount() {
    //Монтирование
    //компонент и все его дочерние компоненты отрисовались без ошибок.
    //+  сайд-эффекты (Вызовы AJAX и т.д.)// http calls // получение данных
    //- this.setState т.к. это вызовет перерисовку.
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    //Обновление происходит при изменении пропсов или состояния. 
    //Следующие методы вызываются в установленном порядке при повторном рендере компонента:
    // static getDerivedStateFromProps()
    // shouldComponentUpdate()
    // render()
    // getSnapshotBeforeUpdate()
    // componentDidUpdate() //вызывается сразу после обновления. Не вызывается при первом рендере.
    // 
    //+ можно вызывать setState(), однако его необходимо обернуть в условие(сравнить пропсы):
  }

  UNSAFE_componentWillMount() {
    //метод устарел//единственный метод жизненного цикла, вызываемый при серверном рендеринге
  }

  UNSAFE_componentWillUpdate() {
    //метод устарел//вызывается непосредственно перед рендером при получении новых пропсов или состояния
    // - вызывать setState()
  }

  UNSAFE_componentWillReceiveProps() {
    //устарел// вызывается до того, как смонтированный компонент получит новые пропсы//Использование этого метода жизненного цикла часто приводило к багам
    //+ при использовании redux
  }
  
  //NEW//

  static getDerivedStateFromProps(props, state) {
    //вызывается непосредственно перед вызовом метода render, как при начальном монтировании, так и при последующих обновлениях. 
    // должен вернуть объект для обновления состояния или null, чтобы ничего не обновлять.
    // исп когда состояние зависит от изменений в пропсах
    // исп редко
    return null;
  }

  getSnapshotBeforeUpdate(prevProps, prevState) {
    // вызывается прямо перед этапом «фиксирования» (например, перед добавлением в DOM). 
    // Он позволяет вашему компоненту брать некоторую информацию из DOM (напр, положение прокрутки) перед её возможным изменением. 
    // Любое значение, возвращаемое этим методом жизненного цикла, будет передано как параметр componentDidUpdate().
  }

  render() {
    return (
      <div>
        <h1>Test Component</h1>
      </div>
    )
  }
}