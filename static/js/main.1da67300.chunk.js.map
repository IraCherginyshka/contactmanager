{"version":3,"sources":["context.js","myComponents/contacts/Contact.js","myComponents/contacts/Contacts.js","myComponents/layout/Header.js","myComponents/layout/TextInputGroup.js","myComponents/contacts/AddContact.js","myComponents/contacts/EditContact.js","myComponents/pages/About.js","myComponents/pages/NotFound.js","myComponents/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","MyProvider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","Provider","props","children","Component","Consumer","Contact","showState","onDeletClick","delete","_this2","_this$props$contact","name","email","phone","className","onClick","style","cursor","float","color","bind","react_router_dom","to","marginRight","Contacts","console","log","Fragment","contacts_Contact","Header","href","branding","defaultProps","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","classnames","is-invalid","AddContact","errors","onSubmit","event","_this$state","newContact","response","preventDefault","abrupt","post","history","push","defineProperty","target","_this$state2","layout_TextInputGroup","EditContact","updContact","match","params","put","About","NotFound","Test","title","body","fetch","then","json","App","context_MyProvider","basename","process","layout_Header","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1da67300.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\n// const Context = React.createContext(defaultValue); //создание обьекта context// получение контекста из ближайшего Provider//в скобках - по умолчанию\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'DELETE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      };\n    case 'ADD_CONTACT':\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts] //формирование нового массива контактов, добавленный контакт и остальные разбитые контакты\n      };\n    case 'UPDATE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\n      };\n    default:\n      return state;\n  }\n};\n\nexport class MyProvider extends Component { //имя было Provider // глобальное хранилище//компонент Provider позволяет Consumers подписываться на изменения в Context\n  state = {\n    contacts: [\n      // {\n      //   id: 1,\n      //   name: \"Irka\",\n      //   email: \"i@ua\",\n      //   phone: \"333-333-333\",\n      // },\n      // {\n      //   id: 2,\n      //   name: \"Zenya\",\n      //   email: \"i@ua\",\n      //   phone: \"777-777-777\",\n      // },\n      // {\n      //   id: 3,\n      //   name: \"Artem\",\n      //   email: \"i@ua\",\n      //   phone: \"555-555-555\",\n      // }\n    ],\n    dispatch: action => this.setState(state => reducer(state, action))\n  }\n\n  //получение контактов с сервера (сайт для тестов) \n  //AJAX-запрос  \n  //можете использовать встроенный в браузер метод window.fetch или любую AJAX-библиотеку, например Axios или jQuery AJAX.\n  // get запрос\n\n  // componentDidMount() {\n  //   axios.get('https://jsonplaceholder.typicode.com/users') //возвр promise\n  //     .then(response => this.setState({\n  //       contacts: response.data //response.data!!!!!!!!!!!!!!!!!!!!!!!!\n  //     }))\n  // }\n\n  //тоже самое в стиле async await\n\n  async componentDidMount() {\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n    this.setState({contacts: res.data});\n  }\n\n  //Каждый объект Контекста используется вместе с Provider компонентом, который позволяет дочерним компонентам, использующим этот контекст, подписаться на его изменения.\n  //{this.props.children} - Это контент между открывающим и закрывающим тегом компонента.//все что находиться между Context.Provider\n  // все компоненты имеют свойство this.props.children, которое заполняется автоматически, если компонент имеет вложенные элементы. Если компонент не имеет вложенных элементов, свойство this.props.children равно null.\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    )\n  }\n}\n//Consumer — это React-компонент, который подписывается на изменения контекста. \nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'; //встроенные валидаторы проверки\nimport { Consumer } from '../../context';\n\nimport axios from 'axios';\n\n\n\nclass Contact extends Component {\n  state = {\n    showState: false\n  };\n  //можно обозначить в стрелочн ф-и в обработчике событий для привязки this\n  // onDeletClick = (id, dispatch) => {\n  //   // dispatch({type: 'DELETE_CONTACT', payload: id}); //для работы со своим состоянием \n\n  //   //AJAX-запрос  \n  //   //можете использовать встроенный в браузер метод window.fetch или любую AJAX-библиотеку, например Axios или jQuery AJAX.\n  //   // delete запрос\n\n  //   axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\n  //   .then(response => {\n  //     dispatch({type: 'DELETE_CONTACT', payload: id})\n  //   });\n  //  };\n\n  // //тоже самое в стиле async await\n\n  onDeletClick = async (id, dispatch) => { //если стрелочная ф-я, то async ставят перед скобками\n    await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`); //ничего не возвращ, можно не обьявлять переменную\n    dispatch({ type: 'DELETE_CONTACT', payload: id });\n  };\n\n  render() {\n    const { id, name, email, phone } = this.props.contact;\n    const { showState } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                {name}{' '}\n                <i\n                  onClick={() => {\n                    this.setState({\n                      showState:\n                        !this.state.showState\n                    })//переключатель true/false\n                  }}\n                  className=\"fas fa-sort-down\"\n                  style={{ cursor: 'pointer' }}\n                />\n                <i\n                  className=\"fas fa-times\"\n                  style={{\n                    cursor: 'pointer', float: 'right',\n                    color: 'red'\n                  }}\n                  onClick={this.onDeletClick.bind(this, id, dispatch)}\n                />\n                <Link to={`contact/edit/${id}`}>\n                  <i\n                    className=\"fas fa-pencil-alt\"\n                    style={{\n                      cursor: 'pointer',\n                      float: 'right',\n                      color: 'black',\n                      marginRight: '1rem'\n                    }}\n                  />\n                </Link>\n              </h4>\n              {showState ? (\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Email: {email}</li>\n                  <li className=\"list-group-item\">Phone: {phone}</li>\n                </ul>\n              ) : null}\n            </div>\n          )\n        }}\n      </Consumer>\n    );\n  }\n}\nContact.propTypes = {\n  // name: PropTypes.string.isRequired //валидация на соответствие jsтипу// и запрос на предупреждение, если проп не указан\n  contact: PropTypes.object.isRequired\n};\n\nexport default Contact;","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport { Consumer } from '../../context';\n\nclass Contacts extends Component {\n\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { contacts } = value;\n          console.log(value);\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n                <span className=\"text-danger\">Contact</span> List\n              </h1>\n              {contacts.map(contact => (\n                <Contact\n                  key={contact.id}\n                  contact={contact}\n                />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    )\n  }\n}\nexport default Contacts;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'; //встроенные валидаторы проверки\n\n\n\nconst Header = (props) => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {props.branding}</a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                <i className=\"fas fa-home\"></i> Home\n                </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/contact/add\" className=\"nav-link\">\n                <i className=\"fas fa-plus\"></i> Add\n                </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                <i className=\"fas fa-question\"></i> About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n// указание дефолтных пропсов//если не указано в app\nHeader.defaultProps = {\n  branding: \"default\"\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired //валидация на соответствие jsтипу// и запрос на предупреждение, если проп не указан\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\n\nconst TextInputGroup = ({ //деструктуризация или props/props.name\n  name,\n  label,\n  placeholder,\n  type,\n  value,\n  onChange, \n  error\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        name={name}\n        // первый параметр по умолчанию класс\n        className={classnames(\"form-control form-control-lg\", {\n          \"is-invalid\": error\n        })} \n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n      {/* true && expression всегда вычисляется как expression, а выражение false && expression — как false. */}\n    </div>\n  )\n};\n\nTextInputGroup.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  error: PropTypes.string,\n  onChange: PropTypes.func.isRequired\n};\n\nTextInputGroup.defaultProps = {\n  type: 'text'\n};\n\n\nexport default TextInputGroup;","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport uuid from 'uuid'; //для генерации уникального id\nimport axios from 'axios';\n\n\nclass AddContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  }\n  onSubmit = async (dispatch, event) => { //async для axios.post\n    event.preventDefault(); //Отмена действия по умолчанию\n\n    const { name, email, phone } = this.state;\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is requred' } });\n      return;\n    }\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is requred' } });\n      return;\n    }\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is requred' } });\n      return;\n    }\n    const newContact = {\n      // id: uuid(), //для post запроса не нужно\n      name,\n      email,\n      phone\n    }\n\n    // dispatch({ type: 'ADD_CONTACT', payload: newContact }); //вызов ф-и //работа со своим состоянием\n\n    //AJAX-запрос  \n    // можете использовать встроенный в браузер метод window.fetch или любую AJAX-библиотеку, например Axios или jQuery AJAX.\n    // post запрос\n\n    // axios.post('https://jsonplaceholder.typicode.com/users', newContact) ////сайт для тестинга//возвращфет promise\n    //   .then(response => dispatch({ type: 'ADD_CONTACT', payload: response.data })); //response.data!!!!!!!!!!!!!!!!!!!!!!!!\n\n    // //тоже самое в стиле async await\n\n    const response = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\n    dispatch({ type: 'ADD_CONTACT', payload: response.data });\n\n    this.setState({ //очистка полей\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    })\n\n    this.props.history.push('/');\n\n  };\n\n  onChange = (event) => this.setState({ [event.target.name]: event.target.value });\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Add Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    name=\"name\"\n                    label=\"Name\"\n                    placeholder=\"Enter Name..\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    name=\"email\"\n                    type=\"email\"\n                    label=\"Email\"\n                    placeholder=\"Enter Email..\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    name=\"phone\"\n                    label=\"Phone\"\n                    placeholder=\"Enter Phone..\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n\n                  <input\n                    type=\"submit\"\n                    value=\"Add Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          )\n        }}\n      </Consumer>\n    )\n\n  }\n}\nexport default AddContact;","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport uuid from 'uuid'; //для генерации уникального id\nimport axios from 'axios';\n\n\nclass EditContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  }\n\n  async componentDidMount() { //можно и не ассинхронно //получение значений поля с сервера\n    const { id } = this.props.match.params;\n\n    const response = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n\n    const contact = response.data;\n\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone\n    })\n  }\n  onSubmit = async (dispatch, event) => { //async для axios.post\n    event.preventDefault(); //Отмена действия по умолчанию\n\n    const { name, email, phone } = this.state;\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is requred' } });\n      return;\n    }\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is requred' } });\n      return;\n    }\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is requred' } });\n      return;\n    }\n\n    const updContact = {\n      name,\n      email,\n      phone\n    }\n    const { id } = this.props.match.params;\n\n    //AJAX-запрос  \n    // можете использовать встроенный в браузер метод window.fetch или любую AJAX-библиотеку, например Axios или jQuery AJAX.\n    // put запрос //update\n\n    const response = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\n\n    dispatch({ type: 'UPDATE_CONTACT', payload: response.data });\n\n    this.setState({ //очистка полей\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    })\n\n    this.props.history.push('/');\n\n  };\n\n  onChange = (event) => this.setState({ [event.target.name]: event.target.value });\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    name=\"name\"\n                    label=\"Name\"\n                    placeholder=\"Enter Name..\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    name=\"email\"\n                    type=\"email\"\n                    label=\"Email\"\n                    placeholder=\"Enter Email..\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    name=\"phone\"\n                    label=\"Phone\"\n                    placeholder=\"Enter Phone..\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          )\n        }}\n      </Consumer>\n    )\n\n  }\n}\nexport default EditContact;","import React from 'react'\n\nexport default function About() {\n  return (\n    <div>\n      <h1 className=\"display-4\">About Contact Manager</h1>\n      <p className=\"lead\">Simple app to manage contact</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h1 className=\"display-4\"><span className=\"text-danger\">404</span>Page Not Found</h1>\n      <p className=\"lead\">Sorry, that page does not exist</p>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\n\nclass Test extends Component {\n  state = {\n    title: '',\n    body: ''\n  }\n\n  //AJAX-запрос  \n  //можете использовать встроенный в браузер метод window.fetch или любую AJAX-библиотеку, например Axios или jQuery AJAX.\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts/1') //сайт для тестинга//возвращфет promise\n      .then(response => response.json())\n      .then(data => this.setState({\n        title: data.title,\n        body: data.body\n      }));\n  }\n\n  // componentDidUpdate(prevProps, prevState, snapshot) {\n\n  // }\n\n  // UNSAFE_componentWillMount() {\n\n  // }\n\n  // UNSAFE_componentWillUpdate() {\n\n  // }\n\n  // UNSAFE_componentWillReceiveProps() {\n\n  // }\n\n  // static getDerivedStateFromProps(props, state) {\n\n  //   return null;\n  // }\n\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\n\n  // }\n\n  render() {\n    const { title, body } = this.state;\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{body}</p>\n      </div>\n    )\n  }\n}\nexport default Test;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './myComponents/contacts/Contacts';\nimport Header from './myComponents/layout/Header';\nimport AddContact from './myComponents/contacts/AddContact';\nimport EditContact from './myComponents/contacts/EditContact';\nimport About from './myComponents/pages/About';\nimport NotFound from './myComponents/pages/NotFound';\nimport Test from './myComponents/test/Test';\n\nimport { MyProvider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    // props.match.params.id //прлучение параметров <Route path='/roster/:id'\n    // Если установлен exact prop. Совпадает только строгое сравнение \n    return (\n      <MyProvider>\n        <Router basename={process.env.PUBLIC_URL}>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path='/' component={Contacts} />\n                <Route exact path='/about' component={About} />\n                <Route exact path='/contact/add' component={AddContact} />\n                <Route exact path='/contact/edit/:id' component={EditContact} />\n                <Route exact path='/test' component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </MyProvider>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}